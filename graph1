#!/usr/bin/env python
import sys,os
import matplotlib.pyplot as pp
import datetime
import matplotlib.dates
import numpy as np

if len(sys.argv)==1:
    sys.stdout.write("Usage:\n   %s --th 24 logfile1 1.0  logfile2 10.0 ... "%(sys.argv[0]))
    #~/cs/thiscomputer/graph1 ~/cs/thiscomputer/battery_values.log 100 ~/cs/thiscomputer/heat_values.log
    import os
    os.exit(-1)

#the number value of time
time_zero = matplotlib.dates.date2num(datetime.datetime.now())


c=1
if sys.argv[c]=='--th': #time in hours
    time_history_depth_sec = float(sys.argv[c+1])*60*60
    c+=2
else:
    time_history_depth_sec = None

#filenames=sys.argv[1:]
filenames=sys.argv[c::2]
scales=map(lambda x:float(x), sys.argv[2::2])

print type(filenames),type(scales)
print len(filenames),len(scales)


for filename,scale in zip(filenames,scales):
    print type(filename),type(scale)
print scales
if len(scales)==len(filenames)-1:
    print "***"
    scales += [1.0]

print zip(filenames,scales)
assert len(filenames)==len(scales)

#a, b = map(int, "2342342,2234234".split(","))  
# [[int(i) for i in line.strip().split(',')] for line in open('input.txt').readlines()]


def load(filename,fields=[1]):
    assert type(fields) is list
    assrt=fields[0]+1  
    y = [ [] ]
    x = []
    for fii in range(len(fields)-1):
        y.append([])
    i=0
    with open(filename) as f:
        for line in f:
            l2 = line.strip().split(',')
            #decode time "2015-1-01 ..."
            dt=datetime.datetime.strptime(l2[0], '%Y-%m-%d %H:%M:%S')
            #print "%s---%r"%(l2[0], dt,)
            #x.append(dt.toordinal())
            t=matplotlib.dates.date2num(dt) - time_zero
            x.append(t)

            for fii in range(len(fields)):
                fi=fields[fii]
                y[fii].append([float(l2[fi])/1000.0])
            #x.append([float(x) for x in l2])
            #x.append(i)
            #i += 1
    return x,y

#datetime.datetime.fromtimestamp(
#        int("1284101485")
#    ).strftime('%Y-%m-%d %H:%M:%S')

def mean(x):
   s=0
   for a in x:
      s+=a
   return s/len(x)

legend_handles=[]
labels=[]

for filename,scale in zip(filenames,scales):
    print type(filename),type(scale)
    #for file(fname).read().split().
    x,y=load(filename,[1])
    #x=map(lambda a: a-mean(x),x)
    for yy in y:
        p1=pp.plot(x,np.array(yy)/scale, label=os.path.split(filename)[1])   #y[0])
        p2=pp.plot(x,np.array(yy)/scale,'o') #orange circles

    legend_handles+=[p1,]
    labels+=[filename,]
#ca=['r','g','b','k','m','c','y']
#pp.rcParams.update({'legend.fontsize': 8, 'legend.linewidth': 1})
pp.gca().set_xlabel('Time [days]')

if not time_history_depth_sec is None:
    dt=datetime.datetime.now()
    t=matplotlib.dates.date2num(dt) - time_zero
    pp.xlim((t-time_history_depth_sec/(24*60*60),t))

#pp.legend(tuple(legend_handles),tuple(labels))
pp.legend() #legend_handles)
pp.title("%s"%(filename,) )
pp.show()


#timezone.utc
#dates = matplotlib.dates.date2num(list_of_datetimes) - time_zero

#http://stackoverflow.com/questions/1574088/plotting-time-in-python-with-matplotlib
